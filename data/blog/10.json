{
    "title": "提供业务能力，SDK的开发",
    "excerpt": "一.业务背景 部门负责的业务主要是 H5 营销物料的制作，会有第三方使用我们的服务制作营销物料。作为营销产品，第三方往往需要私有化部署，自己保存相关的数据。当第三方需要进行数据采集或者在我们现有的框架上进行第二次开发时，就需要我们提供相应的...",
    "updated": "2022-06-15 16:08:51 ",
    "created": "2022-06-15 16:08:51 ",
    "avatar": "https://avatars.githubusercontent.com/u/26271337?v=4",
    "id": 10,
    "content": "<h1 id=\"一业务背景\">一.业务背景</h1>\n<p>部门负责的业务主要是 H5 营销物料的制作，会有第三方使用我们的服务制作营销物料。作为营销产品，第三方往往需要私有化部署，自己保存相关的数据。当第三方需要进行数据采集或者在我们现有的框架上进行第二次开发时，就需要我们提供相应的SDK能力给对方。</p>\n<p>旧代码中暴露的方式是通过全局的回调函数，但是随着业务的复杂度提升，所需要的回调函数也会越来越多。而且客户有进行二次开发的需求，简单的回调函数不能满足该需求。</p>\n<p>因此决定根据在现有的框架的基础上开发一套SDK，暴露自身的业务能力和数据给第三方。</p>\n<h1 id=\"二-设计原则\">二. 设计原则</h1>\n<p>在进行SDK设计时，我的设计原则是：</p>\n<ol>\n<li>对现有业务代码侵蚀小，不污染业务逻辑</li>\n<li>接口易懂，方便调用</li>\n<li>不影响当前业务</li>\n<li>扩展性强</li>\n</ol>\n<h1 id=\"三实操过程\">三.实操过程</h1>\n<h2 id=\"31-发布订阅\">3.1 发布订阅</h2>\n<p>首先是事件分发，这里我采用了 <code>发布订阅</code> 的设计模式。当业务逻辑执行时，主动分发相关事件，提供给订阅者使用。</p>\n<pre><code class=\"language-js\">class EventEmitter {\n    listener= {}\n    $on(eventName, handler) {\n        !this.listener[eventName] &amp;&amp; (this.listener[eventName] = [])\n        this.listener[eventName].push(handler)\n    }\n    $emit(eventName, data) {\n        if (listener[eventName]) {\n            this.listener[eventName].forEach(handler =&gt; {\n                handler(data)\n            })\n        }\n    }\n}\n</code></pre>\n<p>上面就是一个简单的 发布订阅 设计模式，在此基础可以进行功能的丰富。例如直接进行全部事件的的订阅，取消订阅等逻辑。</p>\n<h2 id=\"32-阻止默认事件\">3.2 阻止默认事件</h2>\n<p>对于业务系统的事件，在事件发生时，可以提供给用户阻止默认事件发生的能力，方便用户进行自定义操作。于是我模仿了 <code>DOM</code> 的 <code>EventListener</code> 的模式，在执行一些事件前提供阻止事件的能力。</p>\n<p>用户在使用时，可以这么进行调用</p>\n<pre><code class=\"language-js\">sdk.$on(&#39;before:&lt;EventName&gt;&#39;, (e) =&gt; {\n    e.preventDefault()\n})\n</code></pre>\n<p>在进行事件设计时，一般的业务都会分发两个事件 <code>before:&lt;EventName&gt;</code> 和 <code>after:&lt;EventName&gt;</code>.</p>\n<p>那在具体代码中是怎么实现这个逻辑的呢？</p>\n<p>我是这么实现的, 先定义事件响应结果的类</p>\n<pre><code class=\"language-js\">\nclass EventResponse {\n    data = {}\n    constructor(data, eventName, eventHandler) {\n        this.data = data\n        this.type = eventName\n        this.preventDefault = () =&gt; eventHandler.isPrevent = true\n    }\n}\n</code></pre>\n<p>然后在 <code>EventEmitter</code> 中，将 响应的实例传递给每个订阅者</p>\n<pre><code class=\"language-js\">...\n$emit(eventName, data) {\n    let eventHandler = {\n        isPrevent: false,\n    }\n    const eventResponse = new EventResponse(data, eventName, eventHandler)\n    \n    if (listener[eventName]) {\n            this.listener[eventName].forEach(handler =&gt; {\n                handler(eventResponse)\n            })\n    }\n    return eventHandler.isPrevent\n}\n...\n</code></pre>\n<p>如果有订阅者调用 <code>preventDefault</code> 方法，则会让 <code>isPevent</code> 为 <code>false</code>。然后业务代码根据返回的值决定是否继续业务逻辑，当然此处只支持同步的阻止，异步阻止并无实际的业务意义。</p>\n<p>接下来，我们看看业务代码如何进行事件分发</p>\n<h2 id=\"33-事件代理\">3.3 事件代理</h2>\n<p>查看了旧的业务代码，业务相关的功能函数中充斥着各种回调，埋点的逻辑，实际的功能逻辑被大幅度污染。</p>\n<p>因此我决定不在现有函数中进行事件的分发，而是利用 函数代理，实现事件的分发。</p>\n<p>函数代理很简单，就是将原函数进行包裹，混入一些其他逻辑。</p>\n<pre><code class=\"language-js\">function registProxy(orgin, methodName) {\n    const originMethod = origin[methodName]\n    origin[methodName] = function () {\n        // 其他混入逻辑\n        originMethod.apply(this, arguments)\n    }\n}\n</code></pre>\n<p>这里我主要是混入一些 hook, 然后和之前的事件分发结合起来 ,于是我的代码是这样的</p>\n<pre><code class=\"language-js\">function registProxy({\n    origin,\n    methodName,\n    beforeHook,\n    afterHook,\n\n}) {\n    const originMethod = origin[methodName]\n    orgin[methodName] = function (...args) {\n        const isPrevent = beforeHook(...args)\n        if (isPrevent) return\n        originMethod(...args)\n        afterHook &amp;&amp; afterHook(...args)\n    }\n}\n\nfunction registSyncHook(origin, methodName, eventCode) {\n    registProxy({\n        origin,\n        methodName,\n        beforeHook(...args) {\n            return sdk.$emit(&#39;before:&#39; + eventCode, args)\n        },\n        afterHook: (...args) =&gt; {\n        return iw_emitter.$emit(&#39;after:&#39; + eventCode, args)\n\n        },\n    })\n}\n</code></pre>\n<p>这里通过注入前后 <code>hook</code> 实现了原有函数的代理, 使用 <code>eventCode</code> 和 被代理的函数， 实现了 事件的分发和默认事件的阻止。</p>\n<p>到了目前这一步，其实已经能够满足基本的需求了，但是实际业务中包含很多异步的逻辑，通过回调函数实现函数的结束，这种情况 <code>afterHook</code> 就无法正常起作用了。</p>\n<p>其实对异步的处理也很简单，对于拥有回调函数的的函数我们可以这么进行处理</p>\n<pre><code class=\"language-diff\"> function registProxy({\n     orgin,\n    methodName,\n    beforeHook,\n    afterHook,\n+      isAsync\n }) {\n     ...\n    // 在beforeHook改变参数中的回调函数，\n+\tlet curArgs = args\n+\tconst emitResponse = beforeHook(...args)\n+\tif (emitResponse.isPrevent) return\n-      const isPrevent = beforeHook(...args)\n-      if (isPrevent) return \n+\tif (emitResponse.args) {\n+\t\tcurArgs = emitResponse.args\n+\t}\n+\torginMethod(...curArgs)\n+   if (isAsync) return\n    ...\n}\n\nfunction registAsyncHook(origin, method, eventCode, injectArgsFunc) {\n    registProxy({\n        ...\n        beforeHook: (...args) =&gt; {\n            // injectArgsFunc 函数更改被代理函数的 回调函数\n            // 在回调函数中放入 afterhook 的逻辑\n            const newArgs = injectArgsFunc(args)\n            const isPrevent = iw_emitter.$emit(&#39;before:&#39; + eventCode, args)\n            // 返回新的参数和是否阻止的字段\n            return {\n                isPrevent,\n                args: newArgs,\n            }\n        },\n        isAsync: true\n    })\n\n}\n</code></pre>\n<p>通过对被代理函数 回调函数参数的处理，我们实现了 <code>afterHook</code> 对异步函数的兼容。</p>\n<p>这是实际使用的例子</p>\n<pre><code class=\"language-js\">const injectTestArgsFunc = eventCode =&gt; (args) =&gt; {\n    const {\n        2: callback\n        } = args\n    const newCallback = () =&gt; {\n        sdk.$emit(`after:${eventCode}`, args)\n        callback &amp;&amp; callback()\n    }\n    const newArgs = [...args]\n    newArgs.splice(2, 1, newCallback)\n    return newArgs\n}\n\n\nregistAsyncHook(window, &#39;test&#39;, &#39;test:new&#39;, injectTestArgsFunc(&#39;test:new&#39;))\n</code></pre>\n<p>对于支持 <code>promise</code> 的处理就相对简单了，这里就不进行讨论了。</p>\n<h2 id=\"34-总体处理\">3.4 总体处理</h2>\n<p>当我们将上面的工具函数写好之后，就可以对框架中需要进行暴露的业务函数进行代理，注入相关 <code>hook</code>,\n并将相关的 <code>eventCode</code> 整理成文档，提供给第三方进行使用。对于函数的代理，我们可以写一个函数进行处理，在 <code>SDK</code> 初始化时才进行代理。这样处理的好处在于如果不使用 <code>SDK</code>，对现有的业务逻辑没有一点影响，而且也不影响在线的 <code>debug</code>。</p>\n<pre><code class=\"language-js\">function initRegistProxy() {\n    registAsyncHook(...)\n    registSyncHook(...)\n    ...\n}\n    \nclass EventEmitter {\n    ...\n    \n    init() {\n        initRegistProxy()\n    }\n    ...\n}\n    \nconst sdk = new EventEmitter()\n\n// 用户使用时\nsdk.init()\nsdk.$on(&#39;before:&lt;EventCode&gt;&#39;,()=&gt;{})\n</code></pre>\n<h2 id=\"35-用户主动触发事件\">3.5 用户主动触发事件</h2>\n<p>这个逻辑也好处理，就是 发布者 和 订阅者 的身份对换即可。 业务事件函数订阅相关的 <code>event</code>, 用户可以使用 <code>SDK</code> 进行<code>sdk.$emit(&#39;&lt;eventCode&gt;&#39;)</code>发布事件即可。</p>\n<h1 id=\"四-写在最后\">四. 写在最后</h1>\n<p>经过这次 <code>SDK</code> 开发，加深了我对设计模式的理解，好的设计模式对于代码的解耦非常有帮助。</p>\n<p>同时我也学会了通过 函数代理 来对函数进行扩展，避免对函数内部的业务逻辑产生影响。</p>\n<p>当然 <code>SDK</code> 的开发最重要的还是文档，好的文档描述可以让开发者快速接入 <code>SDK</code>. 对于双方的对接效率有很大的提升。</p>\n"
}