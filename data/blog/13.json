{
    "title": "网页打包安卓应用，实现流程自动化",
    "excerpt": "一. 业务背景 部门的业务主要是营销物料的生产，可以分发到不同终端。手机可以在H5，小程序展示，PC可以打包成 electron应用，但是目前在安卓应用上是空缺的。因此需要提供用户可以将制作的物料直接打包成安卓应用的能力。 二.技术选型 在...",
    "updated": "2022-06-18 13:04:22 ",
    "created": "2022-06-18 13:04:22 ",
    "avatar": "https://avatars.githubusercontent.com/u/26271337?v=4",
    "id": 13,
    "content": "<h1 id=\"一-业务背景\">一. 业务背景</h1>\n<p>部门的业务主要是营销物料的生产，可以分发到不同终端。手机可以在H5，小程序展示，PC可以打包成 electron应用，但是目前在安卓应用上是空缺的。因此需要提供用户可以将制作的物料直接打包成安卓应用的能力。</p>\n<h1 id=\"二技术选型\">二.技术选型</h1>\n<p>在前端相关框架中，提供将H5打包成安卓应用的框架很多。我们主要需要的是能够进行二次开发，且能够快速进行接入。</p>\n<p>其实一开始有想过自己封装 webview ，然后实现混合应用框架的方案的。但是部门内部都没有安卓开发的经验，且需求时间较紧，选择现有的混合框架符合我们的当前的业务场景。</p>\n<p>最终选择了 <a href=\"https://capacitorjs.com/\">capacitor</a> 这个框架，这个框架可以看作在 cordova 的进阶版。功能比较齐全，且提供了很多插件。</p>\n<h1 id=\"三-自动化实现\">三. 自动化实现</h1>\n<p>打包成安卓应用很简单，capacitor 新建一个项目，然后将h5放到指定目录中，然后执行相关命令即可。</p>\n<p>需求的主要难点在于如何实现自动化，后端可以通过 java 直接调用服务器打包应用，然后提供接口给前端。最终展示给用户的就是一个按钮，打包成功后自动通知用户，用户下载应用即可。</p>\n<p>查看了相关文档之后，其实也很简单，主要就是在服务器安装安卓环境，然后执行capacitor的打包即可。</p>\n<h2 id=\"31-安卓环境配置\">3.1 安卓环境配置</h2>\n<p><code>SDKManger</code> 是 <code>Androdi SDK</code> 管理工具，可以通过 <code>SDKManager</code> 下载  <code>Androdi SDK</code></p>\n<pre><code class=\"language-shell\"># 下载\n\ncurl -O https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip\n\n# 解压到目录 得到文件夹 cmdline-tools\n\nunzip commandlinetools-linux-7583922_latest.zip\n\n# 打开到 cmdlin-tools/bin 下载SDK 31（若需要其他版本sdk， 可更换版本号）\n\n./sdkmanager --sdk_root=../ --install &quot;build-tools;31.0.0&quot; &quot;platforms;android-31&quot;\n</code></pre>\n<p>设置环境变量 ， 指定android_home 的路径为cmdline-tools的绝对路径</p>\n<pre><code class=\"language-shell\">sudo vim /etc/profile\n\n...\n\n# Android\n\nexport ANDROID_HOME=...\n\nexport PATH=$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH\n\n...\n\n# 应用\n\nsource /etc/profile\n</code></pre>\n<h2 id=\"32-capacitor-安装\">3.2 capacitor 安装</h2>\n<pre><code class=\"language-shell\">npm init -y\n\n# 下载capacitor依赖 \n\nyarn add @capacitor/core @capacitor/cli @capacitor/android -D\n\n# capacitor初始化\n\nnpx cap init\nnpx cap add android\n# 新建www目录存放网页\nmkdir www\n# 复制网页文件到安卓 一般用下面同步命令就可以了\nnpx cap copy android\n# 同步配置\nnpx cap sync\n</code></pre>\n<h2 id=\"33-签名配置\">3.3 签名配置</h2>\n<p>安卓正式打包需要进行签名，因此需要先生成签名文件, 在 <code>capacitor</code> 生成好的目录中，进入安卓目录</p>\n<pre><code class=\"language-shell\"># 在android目录下 执行该命令\nkeytool -genkey -v -keystore my-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias my-alias\n</code></pre>\n<p>生成好签名后会生成一个 <code>my-release-key.jks</code> 的文件</p>\n<p>打开 <code>app</code> 目录，编辑 <code>build.gradle</code> 文件</p>\n<pre><code class=\"language-groovy\">android {\n\n...\n\n    // 取消格式检查，避免打包错误\n    lintOptions {\n        checkReleaseBuilds false\n    }\n    // 签名配置\n    signingConfigs {\n        release {\n            storeFile file(&quot;../my-release-key.jks&quot;)\n            storePassword &quot;password&quot; # 这个密码需要填生成签名时的密码\n            keyAlias &quot;my-alias&quot;\n            keyPassword &quot;password&quot; # 这个密码需要填生成签名时的密码\n        }\n    }\n\n    buildTypes {\n        release {\n            signingConfig signingConfigs.release\n            ...\n        }\n    }\n\n...\n\n}\n</code></pre>\n<p>完成上述配置后，在 <code>android</code> 目录就可以执行打包了</p>\n<pre><code class=\"language-shell\">./gradlew assembleRelease\n</code></pre>\n<p>打包完成后会在./app/build/outputs/apk/release 文件夹下生成app-release.apk 文件</p>\n<h1 id=\"四-capacitor配置\">四. capacitor配置</h1>\n<h2 id=\"41-自定义启动图和logo\">4.1 自定义启动图和logo</h2>\n<p> 下载依赖包</p>\n<pre><code>yarn add cordova-res -D\n</code></pre>\n<p>打包目录下新建文件夹<code> resource/android</code></p>\n<p>配置四个文件, 普通使用时可以将<code>icon</code>,<code>icon-backgournd</code>,<code>icon-foreground</code>设置为一致即可</p>\n<pre><code>- icon.png // 图标 1024 * 1024\n- splash.png // 启动图 最小2732*2732\n- icon-background.png // 自适应图标 最小432*432\n- icon-foreground.png // 自适应图标 最小432*432\n</code></pre>\n<p>在 <code>package.json</code> 新增命令</p>\n<pre><code>&quot;icon&quot;: &quot;cordova-res android --skip-config --copy&quot;\n</code></pre>\n<p>执行命令即可生成和替换源码的图标</p>\n<pre><code>npm run icon\n</code></pre>\n<p>这里踩了很多坑，利用 <code>cordova-res</code> 工具可以将 图片裁成响应式的图片，适合不同的屏幕。但是我们的业务需求就决定了，最终产物是固定分辨率的安卓设备，因此这里可以不使用上面的插件，直接将文件复制到安卓的 res 中存放图标和启动图的目录即可，删除掉那些针对不同分辨率的目录，只保留一个即可.</p>\n<h2 id=\"42-app强制横屏\">4.2 APP强制横屏</h2>\n<p>配置<code>AndroidManifest.xml</code></p>\n<pre><code class=\"language-xml\">&lt;activity\n    android:screenOrientation=&quot;landscape&quot;\n</code></pre>\n<h2 id=\"43-修改包名\">4.3 修改包名</h2>\n<p>包名决定了手机安装应用的目录。如果手机安装了一个应用，再安装一个与它包名一致的应用时，会导致覆盖应用。</p>\n<p>如果报名一致，签名证书不一致，则安装失败。</p>\n<p>在<code>./android/app/build.gradle</code> 文件进行修改即可</p>\n<pre><code class=\"language-gradle\">android {\n    ...\n    defaultConfig {\n        applicationId &quot;com.test.app&quot;\n        ...\n    }\n    ...\n}\n</code></pre>\n<h2 id=\"44-强制全屏\">4.4 强制全屏</h2>\n<p>配置 <code>android/app/src/res/value/styles.xml</code></p>\n<pre><code class=\"language-xml\">&lt;style name=&quot;AppTheme.NoActionBar&quot; parent=&quot;Theme.AppCompat.NoActionBar&quot;&gt;\n    ...\n    &lt;item name=&quot;android:windowFullscreen&quot;&gt;true&lt;/item&gt;\n    ...\n&lt;/style&gt;\n</code></pre>\n<h2 id=\"45-修改应用名称\">4.5 修改应用名称</h2>\n<p>在<code>android/app/src/main/res/values/strings.xml</code>修改文件</p>\n<pre><code class=\"language-xml\">&lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&gt;\n&lt;resources&gt;\n     &lt;!-- 应用名称 --&gt;\n    &lt;string name=&quot;app_name&quot;&gt;xx&lt;/string&gt; \n    &lt;string name=&quot;title_activity_main&quot;&gt;xx&lt;/string&gt;\n    &lt;!-- 包名 --&gt;\n    &lt;string name=&quot;package_name&quot;&gt;cn.xx.xx&lt;/string&gt;\n     &lt;!-- 自定义协议 --&gt;\n    &lt;string name=&quot;custom_url_scheme&quot;&gt;cn.xx.xx&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre>\n<h1 id=\"五-参考资料\">五. 参考资料</h1>\n<ol>\n<li><a href=\"https://developer.android.com/docs?hl=zh-cn\">https://developer.android.com/docs?hl=zh-cn</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/73532150723f022f73516a6kc81322c012c81e728d9d180\">《第一行代码：Android》(第三版)</a></li>\n<li><a href=\"https://capacitorjs.com/\">https://capacitorjs.com/</a></li>\n</ol>\n"
}