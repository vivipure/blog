{
    "title": "ES2022 的新语法",
    "excerpt": "at 新的索引方法🤔 新增了了索引函数 at `ts const arr = [1,2,3] arr.at(0) // 1 arr.at(-1) // 3 ` 对数组，字符串，类型数组都起作用 Object.hasOwn 🙍‍♂️ 新增...",
    "updated": "2022-08-31 15:54:16 ",
    "created": "2022-07-01 01:27:44 ",
    "avatar": "https://avatars.githubusercontent.com/u/26271337?v=4",
    "id": 15,
    "content": "<h1 id=\"at-新的索引方法🤔\">at 新的索引方法🤔</h1>\n<p>新增了了索引函数 at</p>\n<pre><code class=\"language-ts\">const arr = [1,2,3]\n\narr.at(0) // 1\narr.at(-1) // 3\n</code></pre>\n<p>对数组，字符串，类型数组都起作用</p>\n<h1 id=\"objecthasown-🙍♂️\">Object.hasOwn 🙍‍♂️</h1>\n<p>新增hasOwn 方法判断自身属性，和 hasOwnProperty 没啥区别</p>\n<h1 id=\"error-cause-🙍♂️\">Error Cause 🙍‍♂️</h1>\n<p>实例化 Error 时可以穿入  cause</p>\n<pre><code class=\"language-ts\">const error = new Error(&#39;test error&#39;, {cause: &#39; error reason &#39;})\nerror.cause\n</code></pre>\n<h1 id=\"top-level-await-👌\">Top-level await 👌</h1>\n<p> 允许await 在 async 函数之外使用，可以在顶级作用域使用</p>\n<pre><code>await Promise.resolve()\n</code></pre>\n<h1 id=\"class-field-🤮\">Class field 🤮</h1>\n<p>垃圾的私有变量语法还是通过了</p>\n<pre><code class=\"language-ts\">class Sample {\n   a = 2; // public\n\n   #b = 4 // private\n\n   static #c(){} // private\n\n   static {}  // 类声明时调用 ？？？\n}\n</code></pre>\n<p>除了这恶心的 标识符， 还引入了判断方法，来判断私有属性。 可以在静态方法中 判断 私有属性是否在对象中</p>\n<pre><code class=\"language-ts\">class Sample {\n    static is(obj) {\n        return #b in obj &amp;&amp; #method in obj\n     }\n\n}\n</code></pre>\n"
}