{
    "title": "Webpack 优化",
    "excerpt": "1. 写在前面 Webpack 作为构建工具，前端在使用过程中可以根据自身项目的实际情况进行相关配置。合理的配置对于开发和构建速度有着十分显著的提升。因此本文我们来了解下webpack优化相关的知识点 2. 具体方法 cache 💯 `j...",
    "updated": "2022-06-27 15:27:40 ",
    "created": "2022-05-11 14:21:16 ",
    "avatar": "https://avatars.githubusercontent.com/u/26271337?v=4",
    "id": 3,
    "content": "<h1 id=\"1-写在前面\">1. 写在前面</h1>\n<p>Webpack 作为构建工具，前端在使用过程中可以根据自身项目的实际情况进行相关配置。合理的配置对于开发和构建速度有着十分显著的提升。因此本文我们来了解下webpack优化相关的知识点</p>\n<h1 id=\"2-具体方法\">2. 具体方法</h1>\n<ol>\n<li><p>cache  💯</p>\n<pre><code class=\"language-jsx\">cache: {\n    type: &#39;filesystem&#39;\n}\n</code></pre>\n<p>  Webpack 5新增了基于文件系统的缓存，首次构建后的重新构建速度十分快速</p>\n</li>\n<li><p>symlinks(一般，有少量提升)</p>\n<p> 项目未使用npm link时可以将symlinks设置为false, 也会减少构建时间</p>\n<pre><code class=\"language-jsx\">resolve: {\n    symlinks: false,\n}\n</code></pre>\n</li>\n<li><p>文件压缩和代码抽离（ 👍）</p>\n<p> Webpack 5内置了Terser, 可以在 <code>optimization/minimizer</code> 中对TerserPlugin进行详细配置</p>\n<p> <code>css-minimizer-webpack-plugin</code> 用来压缩css</p>\n<p> 通过 <code>splitChunks</code>中进行配置，可以将常用的公共模块提取到入口chunk中</p>\n<p> 通过<code>mini-css-extract-plugin</code> 将所有的css提取到单独文件中</p>\n<p> <code>purgecss-webpack-plugin</code>  可以分离出未使用的css</p>\n</li>\n<li><p>tree-shaking( 👍)</p>\n<p> 可以通过package.json 中的sideEffect来标记有副作用的文件（非ESM模块），tree-shaking通过ESM进行代码优化，将未使用的代码剔除出去。</p>\n<p> 对于第三方的包，如果有提供ES包的话，可以使用引用三方包的ES包来使用</p>\n</li>\n<li><p>静态文件处理( 👍)</p>\n<p>  对于项目中存在的静态文件，例如图片等，可以上传到cdn,提高访问速度的</p>\n<pre><code class=\"language-jsx\">output: {\n    publicPath: isProd?&#39;${cdnPath}&#39;:&#39;&#39;\n}\n</code></pre>\n</li>\n<li><p>第三方库处理(一般)</p>\n<p> 通过 <code>webpack-bundle-analyzer</code>  插件显示打包后每个模块所占用的大小，可以对打包体积分析</p>\n<p> 对于占用体积较大的第三方依赖，可以考虑cdn引入，减少打包体积</p>\n</li>\n<li><p>JS处理( 💯)</p>\n<p>  可以使用 <code>esbuild-loader</code> 替换<code>babel-loader</code>  来处理JS文件，对于构建速度有很大的提升</p>\n<p> 同时<code>ESBuildMinifyPlugin</code> 插件可以代替<code>TerserPlugin</code>插件进行要锁代码</p>\n</li>\n</ol>\n"
}