{
    "title": "Solid 使用体验",
    "excerpt": "写在前面 国庆假期基本没出去玩，学习了下Astro 和 Solid。这篇文章就来具体讲下 Solid 的开发体验，还有和Vue ,React的框架区别 React Like `tsx const [count, setCount] = cr...",
    "updated": "2022-10-07 12:50:24 ",
    "created": "2022-10-07 12:50:24 ",
    "avatar": "https://avatars.githubusercontent.com/u/26271337?v=4",
    "id": 24,
    "content": "<h1 id=\"写在前面\">写在前面</h1>\n<p>国庆假期基本没出去玩，学习了下Astro 和 Solid。这篇文章就来具体讲下 Solid  的开发体验，还有和Vue ,React的框架区别</p>\n<h1 id=\"react-like\">React Like</h1>\n<pre><code class=\"language-tsx\">const [count, setCount] = createSignal(0)\n</code></pre>\n<p>看到语法的第一眼，就会感到十分眼熟。这不是 React吗？ </p>\n<p>从语法上来说，Solid 和 React 十分相似，但确有根本上的不同。</p>\n<p>在 Solid 中声明响应式变量需要用到 <code>createSignal</code>.  与 React 的 <code>useState</code> 不同的是，返回的第一个值为函数，而不是一个值。</p>\n<p>React 为了实现组件中数据的更新，利用多次闭包加链表实现了 Hooks ,但是 Hooks 存在的闭包陷阱和必须顶层使用是无法进行避免的。</p>\n<p>Solid 中直接返回一个函数，使用函数获取真实的值，完全没有 React hook 存在的问题。这里有点像 Vue3 ，但是比 Vue3  更简洁。</p>\n<h1 id=\"reactive\">Reactive</h1>\n<p>在组件更新上，Solid的处理方式和 React 有很大的区别</p>\n<p>React 函数组件中， 通过 setState 触发函数再次执行函数，实现组件更新。</p>\n<p>而 Solid 函数组件中的代码只会执行一次，组件的更新依赖于响应式数据。Solid 实现了和Vue 类似的方式，进行了依赖收集。当数据变化时，组件就会进行更新。</p>\n<pre><code class=\"language-tsx\">...\nconst [count, setCount] = createSignal(0)\n\nreturn &lt;div onClick={() =&gt; setCount(prev =&gt; prev+1)}&gt;{count()}&lt;/div&gt;\n...\n</code></pre>\n<p>由于是直接使用函数，<code>useMemo</code> 在Solid 中变得很简单</p>\n<pre><code class=\"language-tsx\">const [count, setCount] = createSignal(0)\nconst doubleCount = () =&gt; count() * 2\n\nreturn &lt;div onClick={() =&gt; setCount(prev =&gt; prev+1)}&gt;{doubleCount()}&lt;/div&gt;\n</code></pre>\n<p>不得不说，这样的实现十分优美</p>\n<h1 id=\"❌-virtual-dom\">❌ Virtual DOM</h1>\n<p>Solid 还比较不同的地方，就在于DOM的更新策略上。</p>\n<p>Solid 并没有使用 虚拟DOM, 而是基于真实DOM进行操作。Solid 将DOM的变化颗粒化，响应式数据的变化只对依赖的Node起作用。而不是像虚拟DOM 一样组件重新更新再比较差异进行 patch</p>\n<p>这是一段Solid 代码</p>\n<pre><code class=\"language-tsx\">function Counter() {\n    const [count, setCount] = createSignal(0);\n    const increment = () =&gt; setCount(count() + 1);\n      \n    return (\n    &lt;button type=&quot;button&quot; onClick={increment}&gt;\n        {count()}\n        &lt;span&gt;{count() * 2}&lt;/span&gt;\n    &lt;/button&gt;\n    );\n\n}\n</code></pre>\n<p>编译后的代码</p>\n<pre><code class=\"language-ts\">const _tmpl$ = /*#__PURE__*/template(`&lt;button type=&quot;button&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/button&gt;`, 4);\nfunction Counter() {\n    const [count, setCount] = createSignal(0);\n    const increment = () =&gt; setCount(count() + 1);\n    return (() =&gt; {\n        const _el$ = _tmpl$.cloneNode(true),\n        \n        _el$2 = _el$.firstChild;\n        \n        _el$.$$click = increment;\n        \n        insert(_el$, count, _el$2);\n        insert(_el$2, () =&gt; count() * 2);\n    return _el$;\n    })();\n\n}\n</code></pre>\n<p>这里我们可以看出，其实函数组件就返回了一个DOM。后续数据的变化只会影响到收集到DOM，这一点十分巧妙。</p>\n<h1 id=\"写在最后\">写在最后</h1>\n<p>使用过Vue, React后，来学习 Solid 有一种奇妙的感觉。Solid 使用了两个前辈的各自优点，又有自己的独特之处。</p>\n<p>第一眼看到 Solid 时，感觉是React. 具体进行使用时，又感觉是 Vue. 到了最后，才发现Solid 就是 Solid.</p>\n<p>这篇文章大概讲了下 Solid, 其实也没有讲具体用法。后续会更新具体的使用和相关生态。</p>\n"
}